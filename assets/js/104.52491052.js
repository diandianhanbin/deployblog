(window.webpackJsonp=window.webpackJsonp||[]).push([[104],{399:function(a,t,s){"use strict";s.r(t);var n=s(0),e=Object(n.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h2",{attrs:{id:"背景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#背景"}},[a._v("#")]),a._v(" 背景")]),a._v(" "),s("p",[a._v("新增文章的功能总算是磕磕碰碰的完成了，有时间要去学学前端的技术，自己写一个界面出来，目前看到的界面都是别人的，看起来有点坑，虽然总体风格不错，但是很难找到特别符合我想法的界面。\n下一步博客需要新增markdown的功能、编辑功能和删除功能\n注：markdown现在基本上已经是一个博客所必须具备的功能了，语法详见"),s("a",{attrs:{href:"http://www.appinn.com/markdown/",target:"_blank",rel:"noopener noreferrer"}},[a._v("《markdown语法说明》"),s("OutboundLink")],1),a._v("\n编辑和删除功能：这两个功能一般来说放在后台使用，因为博客只负责展示内容给别人看，只不过熟悉一下这个东西")]),a._v(" "),s("hr"),a._v(" "),s("p",[a._v("版本相关")]),a._v(" "),s("p",[a._v("操作系统：Mac OS X EI Caption")]),a._v(" "),s("p",[a._v("Python版本：3.4")]),a._v(" "),s("p",[a._v("Django版本：1.9")]),a._v(" "),s("p",[a._v("IDE：PyCharm")]),a._v(" "),s("hr"),a._v(" "),s("h2",{attrs:{id:"编辑和删除"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#编辑和删除"}},[a._v("#")]),a._v(" 编辑和删除")]),a._v(" "),s("h3",{attrs:{id:"思路"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#思路"}},[a._v("#")]),a._v(" 思路")]),a._v(" "),s("p",[a._v("删除的思路很简单，点击按钮的时候web端传一个文章的唯一键值（ID）给后端，后端执行删除操作吧数据库这条记录删除了，再返回一个页面，可以自己做一个结果页。也可以直接返回首页（或者其他），我是直接返回首页了，等学会前端后再来返工写这个结果页。\n编辑相对复杂一些，点击编辑按钮的时候，web端要吧文章的ID传给后端，后端要跳转到一个页面，然后把文章的内容填充到页面的编辑框中。我的想法是和新增使用同一个页面，具体实现细节还没想好，后续再增加这个逻辑的处理")]),a._v(" "),s("h3",{attrs:{id:"视图函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#视图函数"}},[a._v("#")]),a._v(" 视图函数")]),a._v(" "),s("p",[a._v("先写好编辑和删除的函数，编辑先用占位符处理，删除可以写好方法。")]),a._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[a._v("views"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("py\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("def")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("del_article")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("request"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" blog_body_id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n    BlogBody"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("objects"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("get"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("id")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("blog_body_id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("delete"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" redirect"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'/'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("def")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("edit_article")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("request"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("pass")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br")])]),s("p",[a._v("传入ID，然后使用ID在数据库做一个删除，最后重定向到首页。编辑的视图函数暂时不处理，使用pass站位。")]),a._v(" "),s("h3",{attrs:{id:"url处理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#url处理"}},[a._v("#")]),a._v(" url处理")]),a._v(" "),s("p",[a._v("url需要新增一个删除的匹配规则。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("urls.py\n\nurl(r'^del_article/(?P<blog_body_id>\\d+)/$', views.del_article, name='del_article'),\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br")])]),s("p",[a._v("匹配的规则和显示文章的内容一样。需要吧这个(?P<blog_body_id>\\d+加上，这样后台才能接受到传入的ID。")]),a._v(" "),s("h3",{attrs:{id:"模版处理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#模版处理"}},[a._v("#")]),a._v(" 模版处理")]),a._v(" "),s("p",[a._v("模版处理其实就是一个删除的入口。这个入口放在那里取决于你自己。我是放在文章的内容页里面")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('view.html\n\n<a href="/">编辑</a> <a href="{% url \'del_article\' blog_content.id %}">删除</a>\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br")])]),s("p",[a._v("这个可以自己随意放置，里面链接的方式和之前的URL跳转方式一样。这样删除功能就搞定了")]),a._v(" "),s("h2",{attrs:{id:"markdown"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#markdown"}},[a._v("#")]),a._v(" markdown")]),a._v(" "),s("h3",{attrs:{id:"思路-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#思路-2"}},[a._v("#")]),a._v(" 思路")]),a._v(" "),s("p",[a._v("这一块就比较麻烦了，自己去写语法肯定是比较麻烦的。Python有现成的markdown库，我们直接调用就行了。安装方法如下：")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$sudo pip install markdown\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[a._v("安装完毕之后，我们要做的就是在Django中使用这个语法作为一个过滤器，把存入后台的markdown文本转化显示出来。\n注：Django在1.5之后的版本把内置的markdown移除了，所以我们只能自己制造过滤器。")]),a._v(" "),s("h3",{attrs:{id:"自定义过滤器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#自定义过滤器"}},[a._v("#")]),a._v(" 自定义过滤器")]),a._v(" "),s("p",[a._v("在app下新建一个templatetags，里面新建两个文件，一个是__init__.py空文件。表示这个是Python的一个模块。另一个是custom_markdown.py。输入以下代码：")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("app/templatetags/custom_markdown.py\n\nimport markdown\nfrom django import template\nfrom django.template.defaultfilters import stringfilter\nfrom django.utils.encoding import force_text\nfrom django.utils.safestring import mark_safe\n\nregister = template.Library()  # 自定义filter时必须加上\n\n\n@register.filter(is_safe=True)  # 注册template filter\n@stringfilter  # 希望字符串作为参数\ndef custom_markdown(value):\n    return mark_safe(markdown.markdown(value,\n                                       extensions=['markdown.extensions.fenced_code', 'markdown.extensions.codehilite'],\n                                       safe_mode=True,\n                                       enable_attributes=False))\n\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br")])]),s("p",[a._v("这样我们的过滤方法就写好了，详细的内容参照"),s("a",{attrs:{href:"http://python.usyiyi.cn/django/howto/custom-template-tags.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("《自定义标签和过滤器》"),s("OutboundLink")],1)]),a._v(" "),s("h3",{attrs:{id:"模版处理-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#模版处理-2"}},[a._v("#")]),a._v(" 模版处理")]),a._v(" "),s("p",[a._v("在需要使用markdown过滤的模版中输入这行代码{% load custom_markdown %}。表示载入我们的过滤器。然后再我们的文章内容的变量中使用这个就行了，类似这样：{ blog_content.blog_body | custom_markdown }就不需要上次写的那个增加空格和换行的过滤了。")]),a._v(" "),s("h3",{attrs:{id:"代码高亮"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#代码高亮"}},[a._v("#")]),a._v(" 代码高亮")]),a._v(" "),s("p",[a._v("使用markdown还不够，我们还需要让代码高亮显示。去"),s("a",{attrs:{href:"https://github.com/richleland/pygments-css",target:"_blank",rel:"noopener noreferrer"}},[a._v("pygment-css"),s("OutboundLink")],1),a._v("下载自己需要的css样式，随便一个下载来使用都可以。我是全部下下来一个一个的看了效果。使用这个的时候需要安装"),s("a",{attrs:{href:"https://pypi.python.org/pypi/Pygments",target:"_blank",rel:"noopener noreferrer"}},[a._v("pygment"),s("OutboundLink")],1),a._v("，我是使用3.x的版本，所以我下载的是3.3的库，安装完毕后，在base.html载入下载的CSS就可以看到最终的效果了")]),a._v(" "),s("h2",{attrs:{id:"后记"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#后记"}},[a._v("#")]),a._v(" 后记")]),a._v(" "),s("p",[a._v("markdown和语法高亮相关是参考"),s("a",{attrs:{href:"http://wiki.jikexueyuan.com/project/django-set-up-blog/markdown.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("《极客学院教程》"),s("OutboundLink")],1),a._v("整（chao）理（xi）而来。总体来说，还是很快速的实现了功能。但是还是有一些问题。比如：\n1、存放到数据库的字段会变成##这种，显示列表的时候不好看。\n2、我的HTML代码是高亮了。。。。可是Python的代码依然不是高亮的。= =！\n3、代码不会自动换行，基本上长代码都无法浏览。\n（未完待续。。。。）")])])}),[],!1,null,null,null);t.default=e.exports}}]);