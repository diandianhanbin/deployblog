(window.webpackJsonp=window.webpackJsonp||[]).push([[157],{339:function(t,e,s){"use strict";s.r(e);var r=s(0),a=Object(r.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[s("a",{attrs:{href:"https://developer.apple.com/library/content/documentation/DeveloperTools/Conceptual/testing_with_xcode/chapters/06-debugging_tests.html#//apple_ref/doc/uid/TP40014132-CH6-SW1",target:"_blank",rel:"noopener noreferrer"}},[t._v("原文地址"),s("OutboundLink")],1)]),t._v(" "),s("h1",{attrs:{id:"debugging-tests"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#debugging-tests"}},[t._v("#")]),t._v(" Debugging Tests")]),t._v(" "),s("p",[t._v("执行测试的时候，所有Xcode提供的debugging工具都可以用来使用。")]),t._v(" "),s("h2",{attrs:{id:"test-debugging-workflow"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#test-debugging-workflow"}},[t._v("#")]),t._v(" Test Debugging Workflow")]),t._v(" "),s("p",[t._v("首先要做的事是要确定引起失败的问题是你测试的内容有bug产生的，还是正在执行的测试方法有bug。测试失败可以指出一些列不同的问题——无论是你的预期，被测代码的要求，或者测试代码本身。所以debugging测试可以产生多个不同的工作流。然而，你的测试方法通常比较小也比较简单，所以首先你最好检查要测试什么，如何执行。")]),t._v(" "),s("p",[t._v("这里有一些常见的问题需要记住：")]),t._v(" "),s("ul",[s("li",[t._v("测试的逻辑是否正确？执行是否正确？")])]),t._v(" "),s("p",[t._v("一个好的办法是使用测试方法作为基准的预期的标准来检查类型和不正确的值。")]),t._v(" "),s("ul",[s("li",[t._v("假设是什么？")])]),t._v(" "),s("p",[t._v("例如，你也许可以在测试方法中使用错误的数据类型，为你测试的代码创建一系列的错误。")]),t._v(" "),s("ul",[s("li",[t._v("你是否使用了正确的断言来报告通过/失败的状态？")])]),t._v(" "),s("p",[t._v("例如，也许测试的场景中需要"),s("em",[t._v("XTCAssertTrue")]),t._v("而不是"),s("em",[t._v("XCTAssertFalse")]),t._v("，在某些情况下很容易就造出这个错误。")]),t._v(" "),s("p",[t._v("假定你的测试场景是正确的，测试方法也是真确的，那么问题就出在被测试的代码中。是时候来定位和修复它了。")]),t._v(" "),s("h2",{attrs:{id:"test-specific-debugging-tools"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#test-specific-debugging-tools"}},[t._v("#")]),t._v(" Test Specific Debugging Tools")]),t._v(" "),s("p",[t._v("当使用测试时，Xcode有许多特殊的工具被设计给你来定位和追踪代码中的bug。")]),t._v(" "),s("h3",{attrs:{id:"test-failure-breakpoint"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#test-failure-breakpoint"}},[t._v("#")]),t._v(" Test Failure Breakpoint")]),t._v(" "),s("p",[t._v("在测试运行之前，在断点导航器中，点击增加按钮，选择"),s("em",[t._v("Add Test Failure Breakpoint")]),t._v("来设置一个特殊的断点。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://blog-img-1251534856.cos.ap-guangzhou.myqcloud.com/1537778299231252.jpg",alt:""}})]),t._v(" "),s("p",[t._v("当一个测试方法产生一个错误的断言时，断点会阻止测试运行。在被测代码产生错误之后马上停止执行，这给你机会发现错误产生的位置。你可以在视图中看到"),s("em",[t._v("testAddition")]),t._v("这个测试方法通过设置与错误字符串比较的参考标准，被迫断言比较字符串是失败的。测试失败的断点发现失败的断言，在这个点停止了测试执行。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://blog-img-1251534856.cos.ap-guangzhou.myqcloud.com/1537778391163203.jpg",alt:""}})]),t._v(" "),s("p",[t._v("当一个测试项这样停止运行，你应该停止执行测试，然后在断言之前设置一个正常的断点。再次运行测试（为了方便和节省时间，您可以使用源代码编辑器中的“运行”按钮来运行此测试），使用debugging操作来修复这个问题。")]),t._v(" "),s("h3",{attrs:{id:"using-project-menu-commands-to-run-tests"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#using-project-menu-commands-to-run-tests"}},[t._v("#")]),t._v(" Using Project Menu Commands to Run Tests")]),t._v(" "),s("p",[t._v("debugging测试方法是好的时机来记住菜单命令 "),s("em",[t._v("Project > Perform Action > Test Again")]),t._v("和"),s("em",[t._v("Project > Perform Action > Test")]),t._v("。在运行当前测试方法失败后如果你正在编辑代码修复问题，他们提供一个非常方便的方法复现最后一个测试方法。详细的信息请查看"),s("a",{attrs:{href:"https://developer.apple.com/library/prerelease/content/documentation/DeveloperTools/Conceptual/testing_with_xcode/chapters/05-running_tests.html#//apple_ref/doc/uid/TP40014132-CH5-SW8",target:"_blank",rel:"noopener noreferrer"}},[t._v("Using the Product Menu"),s("OutboundLink")],1),t._v(".当然你可以使用测试导航器中的运行按钮或者源代码编辑器中的标志或者你发现更多方便的方式来运行测试。")]),t._v(" "),s("h3",{attrs:{id:"assistant-editor-categories"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#assistant-editor-categories"}},[t._v("#")]),t._v(" Assistant Editor Categories")]),t._v(" "),s("p",[t._v("在助手中专门为测试增加了两个类别的编辑菜单。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://blog-img-1251534856.cos.ap-guangzhou.myqcloud.com/1537778412851925.jpg",alt:""}})]),t._v(" "),s("ul",[s("li",[t._v("Test Callers category")])]),t._v(" "),s("p",[t._v("如果你刚刚修复一个引发app错误的方法，你可能会想检查该方法在其他测试运行是否成功。问题方法在源码编辑器中，打开编辑助手，在菜单中选择"),s("em",[t._v("Test Classes")]),t._v("。一个弹出式菜单将允许您导航到任何调用它的测试方法，以便您可以运行它们，并确保由您的修复的问题还没有回归。")]),t._v(" "),s("ul",[s("li",[t._v("Test Classes category")])]),t._v(" "),s("p",[t._v("这个助手编辑种类和"),s("em",[t._v("Test Callers")]),t._v("类似，但是展示了一个含有测试方法的类的列表，在主源码编辑器中引用的类。这是一个很好的方式来确定是否添加测试，例如，仅仅执行你还没有纳入到测试方法中的新方法。")]),t._v(" "),s("h3",{attrs:{id:"exception-breakpoints-when-testing"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#exception-breakpoints-when-testing"}},[t._v("#")]),t._v(" Exception Breakpoints When Testing")]),t._v(" "),s("p",[t._v("通常来说，当一个断点引发了异常，这个异常会停止测试的执行。所以测试通常运行的时候会被断点异常阻止是为了当端点触发的时候让你定位不正确的地方。当你在回归一个特殊的问题想要停下来修复它的时候你可以启用异常断点。")])])}),[],!1,null,null,null);e.default=a.exports}}]);